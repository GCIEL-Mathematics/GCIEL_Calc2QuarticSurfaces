#pragma kernel March


#include "Includes\MarchingTable.hlsl"

#include "Includes\MetricsCompute.compute"


RWStructuredBuffer<float> _Weights;

float _IsoLevel;
float3 _PlaneForward;
float3 _PlaneRight;

struct Segment{
    float3 a, b;
};

AppendStructuredBuffer<Segment> _Segments;


float3 interp(float3 sideVertex1, float valueAtPoint1, float3 sideVertex2, float valueAtPoint2)
{
    return (sideVertex1 + (_IsoLevel - valueAtPoint1) * (sideVertex2 - sideVertex1) / (valueAtPoint2 - valueAtPoint1));
}


[numthreads(numThreads, numThreads, 1)]
void March(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _ChunkSize - 1 || id.y >= _ChunkSize - 1)
    {
        return;
    }

    float squareValues[4] = {
       _Weights[indexFromCoord(id.x, id.y, 0)],
       _Weights[indexFromCoord(id.x, id.y + 1, 0)],
       _Weights[indexFromCoord(id.x + 1, id.y + 1, 0)],
       _Weights[indexFromCoord(id.x + 1, id.y, 0)]
    };

    int squareIndex = 0; // Find the index in look up table for correct square situation (0 - 15)
    if (squareValues[0] < _IsoLevel) squareIndex |= 1;
    if (squareValues[1] < _IsoLevel) squareIndex |= 2;
    if (squareValues[2] < _IsoLevel) squareIndex |= 4;
    if (squareValues[3] < _IsoLevel) squareIndex |= 8;

    int sides[] = pTable[squareIndex];

    for (int i = 0; sides[i] != -1; i += 2)
    {
        // First vertex lies between vertex s00 and vertex s01
        int s00 = sideConnections[sides[i]][0];
        int s01 = sideConnections[sides[i]][1];

        // Second vertex lies between vertex s10 and vertex s11
        int s10 = sideConnections[sides[i + 1]][0];
        int s11 = sideConnections[sides[i + 1]][1];

        float3 interpA = interp(squareCornerOffsets[s00], squareValues[s00], squareCornerOffsets[s01], squareValues[s01]);
        float3 interpB = interp(squareCornerOffsets[s10], squareValues[s10], squareCornerOffsets[s11], squareValues[s11]);

        Segment seg;
        seg.a = (interpA.x + id.x - _ChunkSize / 2.0f) * float3(1, 0, 0) + (interpA.z + id.y - _ChunkSize / 2.0f) * float3(0, 0, 1);
        seg.b = (interpB.x + id.x - _ChunkSize / 2.0f) * float3(1, 0, 0) + (interpB.z + id.y - _ChunkSize / 2.0f) * float3(0, 0, 1);
        _Segments.Append(seg);
    }

}