#pragma kernel GenerateNoise
#pragma kernel GenerateNoisePlane

#include "Includes\FastNoiseLite.compute"
#include "Includes\MetricsCompute.compute"

RWStructuredBuffer<float> _Weights;

uint _IsPlane;
uint _Function;
float _Size;
float _Scale;
float _Amplitude;
float _Frequency;
float3 _Offset;
float3 _PlaneRight;
float3 _PlaneForward;


float valCalc(float3 pos){
    float val = 0;
    switch(_Function){
        case 0:
            val = pos.x * pos.x + pos.y * pos.y + pos.z * pos.z - 1;
            break;
        case 1:
            val = pos.x * pos.x - pos.y * pos.y - 1;
            break;
        case 2:
            val = pos.x + pos.y + pos.z;
            break;
        case 3:
            val = 2 * pos.y * (pos.y * pos.y - _Frequency * pos.x * pos.x) * (1 - pos.z * pos.z)+(pos.x * pos.x + pos.y * pos.y) * (pos.x * pos.x + pos.y * pos.y) + (9 * pos.z * pos.z - 1) * (pos.z * pos.z - 1);
            break;
        case 4:
            val = pos.x * pos.x - pos.z * pos.z * pos.z - pos.y;
            break;
        case 5:
            val = pos.y - sqrt(pos.x * pos.x + pos.z * pos.z);
            break;
        case 6:
            val = exp(-(pos.x * pos.x + pos.y * pos.y)) - pos.z;
            break;
        case 7:
            val = cos(pos.x * pos.x + pos.y * pos.y) * 0.5f - pos.z;
            break;

    }

    return val;
}

float3 ExchangeAxis(float3 vec){
    float3 newVec = vec;
    newVec.y = vec.z;
    newVec.z = vec.y;

    return newVec;
}



[numthreads(numThreads, numThreads, numThreads)]
void GenerateNoise(uint3 id : SV_DispatchThreadID)
{

    float3 pos = (id + _Offset - float3(1, 1, 1) * _ChunkSize / 2.0f) / _Scale;
    _Weights[indexFromCoord(id.x, id.y, id.z)] = 0;
    pos = ExchangeAxis(pos);

    float val = valCalc(pos);

    if (val <= _Amplitude)
    {
        float sigmoid = 1 / (1 + exp(val));
        _Weights[indexFromCoord(id.x, id.y, id.z)] = sigmoid;        
    }
}

[numthreads(numThreads, numThreads, 1)]
void GenerateNoisePlane(uint3 id : SV_DispatchThreadID)
{

    float3 pos = ((id.x - _ChunkSize / 2.0f) * _PlaneRight + (id.y - _ChunkSize / 2.0f) * _PlaneForward + _Offset) / _Scale;
    _Weights[indexFromCoord(id.x, id.y, 0)] = 0;
    pos = ExchangeAxis(pos);
    

    float val = valCalc(pos);

    if (val <= _Amplitude)
    {
        float sigmoid = 1 / (1 + exp(val));
        _Weights[indexFromCoord(id.x, id.y, 0)] = sigmoid;
        
    }
}